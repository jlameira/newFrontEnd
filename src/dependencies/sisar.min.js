var sisarBase = (function () {
    var base = {};
    var modules = [
        'logger.js',
        'monitor.js',
        'rest.js',
        'templates.js',
        'uploader.js'
    ];
    base.init = function () {
        loadCdi(function () {
            sisarLogger.info('CDI Libs was loaded');
            reloadComponents();
            sisarMonitor.recursive(300);
        });
    };
    base.defaultVideoPlayer = function (video) {
        if (video) {
            var parent = video.parentNode;
            if (parent) {
                var play = parent.getElementsByClassName('play');
                if (play) {
                    var tamanho = play.length;
                    for (var k = 0; k < tamanho; k++) {
                        play[k].classList.add('no');
                    }
                }
            }
            video.classList.remove('pointer');
            video.play();
            video.controls = true;
        }
    };
    loadCdi = function (callback) {
        sisarLoader.cdi(modules, callback);
    };
    reloadComponents = function () {
        var tags = document.getElementsByTagName('sisar-file');
        if (tags) {
            var length = tags.length;
            for (var k = 0; k < length; k++) {
                tags[k].classList.remove('sisar-ok');
                tags[k].innerHTML = null;
            }
        }
    };
    return base;
}());
var sisarInit = setInterval(function () {
    if('sisarLoader' in window) {
        clearInterval(sisarInit);
        sisarBase.init();
    }
}, 200);
var sisarLoader = (function () {
    var loader = {};
    var config = {
        protocol: 'https',
        baseUrl: 'sisar.policiamilitar.mg.gov.br/static/'
    };
    loader.cdi = function (files, callback) {
        if (files) {
            var length = files.length;
            for (var k = 0; k < length; k++) {
                loadScript(files[k]);
            }
        }
        var validator = setInterval(function () {
            if (checkScripts(files)) {
                clearInterval(validator);
                callback();
            }
        }, 200);
    };
    loadScript = function (name) {
        var moduleName = 'sisar' + (name.charAt(0).toUpperCase() + name.slice(1)).split('.')[0];
        if (!(moduleName in window)) {
            var version = new Date().getTime();
            var script = document.createElement('script');
            script.src = config.protocol + '://' + config.baseUrl + name + '?v=' + version;
            script.type = 'text/javascript';
            (document.body || document.head || document.documentElement).appendChild(script);
        }
    };
    checkScripts = function (files) {
        var callback = true;
        if (files) {
            var length = files.length;
            for (var k = 0; k < length; k++) {
                var moduleName = 'sisar' + (files[k].charAt(0).toUpperCase() + files[k].slice(1)).split('.')[0];
                if (!(moduleName in window)) {
                    callback = false;
                }
            }
        }
        return callback;
    };
    return loader;
}());
var sisarTemplates = (function () {
    var templates = {};
    var config = {
        img: `
            <img src="{{image}}" onclick="{{onclick}}" class="pointer {{clazz}}"/>
        `,
        video: `
            <video preload="none" onclick="{{onclick}}" class="pointer">
                <source src="{{video}}" type="video/mp4">
            </video>
            <span class="play pointer"></span>
        `,
        link: `
            <a href="javascript:void(0);" onclick="{{onclick}}" class="{{clazz}}">
                {{text}}
            </a>
        `,
        error: `
            <div class="msg de erro">{{message}}</div>
        `
    };
    templates.toImage = function (bind) {
        if (!bind.onclick) {
            bind.onclick = 'window.open(this.src,\'_blank\')';
        }
        return processBind(config.img, bind);
    };
    templates.toVideo = function (bind) {
        if (!bind.onclick) {
            bind.onclick = 'sisarBase.defaultVideoPlayer(this)';
        }
        return processBind(config.video, bind);
    };
    templates.toLink = function (bind) {
        if (!bind.onclick) {
            bind.onclick = 'sisarRest.conventionalDownload(\'' + bind.path + '\', \'' + bind.public + '\')';
        }
        return processBind(config.link, bind);
    };
    templates.toError = function (error) {
        return processBind(config.error, {
            message: error
        });
    };
    processBind = function (template, bind) {
        if (template && bind) {
            var keys = Object.keys(bind);
            var length = keys.length;
            for (var k = 0; k < length; k++) {
                template = template.split('{{' + keys[k] + '}}').join(bind[keys[k]]);
            }
            return template;
        }
    };
    return templates;
}());
var sisarRest = (function () {
    var rest = {};
    var config = {
        paths: {
            fileInfo: 'https://sisar.policiamilitar.mg.gov.br/backend/geral/info/%s',
            stream: 'https://sisar.policiamilitar.mg.gov.br/backend/geral/download/%s',
            public: 'https://sisar.policiamilitar.mg.gov.br/backend/geral/publico/%s',
            upload: 'https://sisar.policiamilitar.mg.gov.br/backend/geral/enviar'
        }
    };
    rest.fileInfo = function (id, callback) {
        getClient('GET', config.paths.fileInfo.replace('%s', id), false, callback).send();
    };
    rest.stream = function (id, publicFile, callback) {
        var baseUrl = config.paths.stream;
        if (publicFile) {
            baseUrl = config.paths.public;
        }
        getClient('GET', baseUrl.replace('%s', id), true, callback).send();
    };
    rest.conventionalDownload = function (id, publicFile) {
        var callback = function (stream) {
            var link = document.createElement('a');
            link.style = 'display: none';
            link.href = URL.createObjectURL(stream);
            link.download = '';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        };
        var baseUrl = config.paths.stream;
        if (publicFile && publicFile !== 'undefined') {
            baseUrl = config.paths.public;
        }
        getClient('GET', baseUrl.replace('%s', id), true, callback).send();
    };
    rest.uploadClient = function (callback) {
        var client = getClient('POST', config.paths.upload, false, callback);
        client.setRequestHeader('Content-Type', 'application/json');
        return client;
    };
    getClient = function (method, url, media, callback) {
        var request = new XMLHttpRequest();
        request.onreadystatechange = function () {
            if (request.readyState === 4 && request.status === 200 && callback) {
                if (media) {
                    callback(request.response, request.status);
                } else {
                    callback(request.responseText, request.status);
                }
            } else {
                if (request.status !== 200) {
                    callback(JSON.stringify({erro: 'Arquivo não localizado'}), request.status);
                }
            }
        };
        request.open(method, url, true);
        request.setRequestHeader('Authorization', getUserToken());
        if (media) {
            request.responseType = 'blob';
        }
        return request;
    };
    getUserToken = function () {
        var values = '; ' + document.cookie;
        var parts = values.split('; tokiuz=');
        if (parts.length === 2) {
            return parts.pop().split(';').shift();
        }
    };
    return rest;
}());
var sisarMonitor = (function () {
    var monitor = {};
    monitor.run = function () {
        sisarLogger.info('Run monitor');
        locateAndProcess();
    };
    monitor.recursive = function (timeout) {
        sisarLogger.info('Start monitor...');
        setInterval(locateAndProcess, timeout);
        sisarLogger.info('Monitor running');
    };
    locateAndProcess = function () {
        var tags = document.getElementsByTagName('sisar-file');
        if (tags) {
            var length = tags.length;
            var located = 0;
            for (var k = 0; k < length; k++) {
                if (!tags[k].classList.contains('sisar-ok')) {
                    located++;
                    process(tags[k]);
                    tags[k].classList.add('sisar-ok');
                }
            }
            if (located > 0) {
                sisarLogger.info(located + ' sisar tags located');
            }
        }
    };
    process = function (node) {
        var id = getFileId(node);
        if (id && (id.toLowerCase() === 'undefined' || id.toLowerCase() === 'null')) {
            node.innerHTML = sisarTemplates.toError('Arquivo não localizado');
            return;
        }
        sisarRest.fileInfo(id, function (response, status) {
            var info = JSON.parse(response).retorno || JSON.parse(response);
            if (status !== 200) {
                node.innerHTML = sisarTemplates.toError(info.erro);
                return;
            }
            sisarLogger.info(info);
            var fileName = info.nome;
            if (!fileName) {
                fileName = info.path.split('/').pop();
            }
            if (info.mime.indexOf('image') >= 0) {
                sisarRest.stream(id, info.publico, function (stream) {
                    var image = new Blob([stream], {type: info.mime});
                    node.innerHTML = sisarTemplates.toImage({
                        image: URL.createObjectURL(image),
                        clazz: getFileClass(node),
                        onclick: getCallback(node)
                    });
                    sisarLogger.info('File with id = ' + id + ' was rendered as html media');
                });
            } else if (info.mime.indexOf('video/mp4') >= 0) {
                if (navigator.userAgent.indexOf('Firefox') < 0) {
                    sisarRest.stream(id, info.publico, function (stream) {
                        var video = new Blob([stream], {type: info.mime});
                        node.innerHTML = sisarTemplates.toVideo({
                            video: URL.createObjectURL(video),
                            clazz: getFileClass(node),
                            onclick: getCallback(node)
                        });
                        sisarLogger.info('File with id = ' + id + ' was rendered as html video');
                    });
                } else {
                    node.innerHTML = sisarTemplates.toLink({
                        path: id,
                        public: info.publico,
                        text: fileName,
                        clazz: getFileClass(node),
                        onclick: getCallback(node)
                    });
                    sisarLogger.info('File with id = ' + id + ' was rendered as html link');
                }
            } else {
                node.innerHTML = sisarTemplates.toLink({
                    path: id,
                    public: info.publico,
                    text: fileName,
                    clazz: getFileClass(node),
                    onclick: getCallback(node)
                });
                sisarLogger.info('File with id = ' + id + ' was rendered as html link');
            }
        });
    };
    getFileId = function (node) {
        if (node.dataset.src) {
            return node.dataset.src.split('/').pop();
        } else {
            if (node.getAttribute('ng-reflect-src')) {
                return node.getAttribute('ng-reflect-src').split('/').pop();
            }
        }
    };
    getFileClass = function (node) {
        if (node.dataset.class) {
            return node.dataset.class;
        } else {
            if (node.getAttribute('ng-reflect-class')) {
                return node.getAttribute('ng-reflect-class');
            }
        }
    };
    getCallback = function (node) {
        if (node.dataset.onclick) {
            return node.dataset.onclick;
        } else {
            if (node.getAttribute('ng-reflect-onclick')) {
                return node.getAttribute('ng-reflect-onclick');
            }
        }
    };
    return monitor;
}());
var sisarUploader = (function () {
    var uploader = {};
    uploader.upload = function (nodeId, callback) {
        var files = getFIles(nodeId);
        var length = files.length;
        for (var k = 0; k < length; k++) {
            var reader = new FileReader();
            reader.onload = (function (readed) {
                return function (e) {
                    sisarLogger.info('Uploading file: ' + readed.name);
                    var customCallback = function (retorno) {
                          if (retorno) {
                              var json = JSON.parse(retorno);
                              if (!json.erro) {
                                  setTimeout(function () {
                                      callback(retorno);
                                  }, 500);
                              }
                          }
                    };
                    sendSisarFile(e.target.result.split(',').pop(), readed.name.split('.').pop(), readed.name, customCallback);
                };
            })(files[k]);
            reader.readAsDataURL(files[k]);
        }
    };
    getFIles = function (nodeId) {
        var node = document.getElementById(nodeId);
        if (node && node.files) {
            return node.files;
        }
    };
    sendSisarFile = function (base64, type, name, callback) {
        var client = sisarRest.uploadClient(callback);
        client.send(JSON.stringify({
            tipo: type,
            pacote: base64,
            nome: name,
            app: window.location.href.split('/')[3]
        }));
    };
    return uploader;
}());
var sisarLogger = (function () {
    var logger = {};
    logger.info = function (message) {
        if (message) {
            pmLog.info(getMessage(message));
        }
    };
    logger.error = function (message) {
        if (message) {
            pmLog.error(getMessage(message));
        }
    };
    logger.warning = function (message) {
        if (message) {
            pmLog.warn(getMessage(message));
        }
    };
    getMessage = function (body) {
        if (typeof body === 'string') {
            return '[SISAR] - ' + body;
        } else {
            return '[SISAR] - ' + JSON.stringify(body, null, 2);
        }
    };
    return logger;
}());
export default sisarBase
